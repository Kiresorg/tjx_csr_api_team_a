swagger: '2.0'
info:
  # we are using javascript, non-typed language
  description: This is a simple API
  version: 1.0.0
  title: Orders API
  # put the contact info for your development or API team
  contact:
    email: you@your-company.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
- name: admins
  description: Secured Admin-only calls
- name: developers
  description: Operations available to regular developers

paths:
  /products: 
      get: 
        summary: get all products
        description: "Get all products from database"
        operationId: getAllProducts
        responses: 
          200: 
            description: OK
          500: 
            description: 'server error'
  /products/{id}:
    get: 
      summary: get specific product 
      description: "Get a specific product by the ID"
      operationID: getProduct
      parameters: 
        - name: id
          in: path
          description: order ID
          required: true
          type: integer
          format: int64 
      responses: 
        200:
          description: OK
        400:
          description: Bad Request
        500:
          description: 'server error'
    put: 
      summary: update specific product 
      description: "increment/decrement quantity given its id" 
      operationsId: updateProduct
      parameters: 
        - name: id
          in: path
          description: order ID
          required: true
          type: integer
          format: int64 
        - name: incrementOrDecrement
          description: 'true to increment, false to decrement'
          format: boolean 
          required: true
      responses: 
        200:
          decription: OK
        500: 
          description: 'server error'
  /orders:
    get:
      summary: get all orders
      description: "get all orders"
      operationId: getAllOrders
      responses:
        200:
          description: OK
    
    post:
      summary: create new order
      description: "Create new order draft, is not an 'active' order yet"
      operationId: createNewOrder
      parameters:
      - name: id
          in: path
          description: order ID
          required: true
          type: integer
          format: int64 
      responses:
        200:
          description: OK
        400:
          description: Bad Request
  /orders/{id}:
    get:
      summary: get specific order
      description: "Get an order based on a customer ID"
      operationId: getOrder
      parameters:
        - name: id
          in: path
          description: order ID
          required: true
          type: integer
          format: int64 
      responses:
        200:
          description: OK
        400: 
          description: Bad Request
        404:
          description: Order not found
    put:
      summary: modify existing order
      description: using an order id, modifies an existing order
      operationId: modifyOrder
      parameters: 
        - name: id
          in: path
          description: order ID
          required: true
          type: integer
          format: int64 
      responses:
        200:
          description: OK
        400: 
          description: Bad Request
          
    delete:
      summary: delete draft order (not allowed for active orders)
      description: checks an order for activeness, and deletes if not active
      operationId: deleteOrder
      parameters:
        - name: id
          in: path
          description: order ID
          required: true
          type: integer
          format: int64 
      responses:
        200:
          description: OK
        400:
          description: Bad Request
  /customers:
    get: 
      summary: get all customers
      description: gets all customers from the database
      operationId: getAllCustomers
  /customers/{id}:
    get:
      summary: gets a customer by ID
      description: searches through the database
      and gets the customer matching the ID
      operationId: getSpecificCustomer
      responses:
        200:
          description: OK
        400:
          description: Bad Request
    put:
      summary: modify a customer
      description: using a customerID, update a 
      specific customer
      operationId: modifyCustomer
      responses:
        200:
          description: OK
        400: 
          description: Bad Request
    delete:
      summary: deletes a specific customer
      description: using a customerID, deletes a
      specific customer
      operationId: deleteSpecificCustomer
      responses:
        200:
          description: OK
        400:
          description: Bad Request

definitions:
  product:
    type: object
    required:
    - name
    - id
    - SKU
    - cost
    properties:
      name:
        type: string
        example: Red Pen
      id:
        type: string
        example: 0123456789
      SKU:
        type: string
        example: 012345
      cost:
        type: double
        example: 0.99
  customer:
    required:
    - name
    - phone
    - shipping address
    properties:
      name:
        type: string
        example: Bobby De Builda
      phone:
        type: string
        example: 333-333-3333
      shipping address:
        type: string
        example: 123 Main St, Town City, MA, 11111
  order:
    required:
    - id
    - totalcost
    - shipping address
    properties:
      id:
        type: string
        example: 000001
      totalcost:
        type: double
        example: 19.99
      shipping address:
        type: string
        example: 123 Main St, Town City, MA, 11111
      phone:
        type: string
        example: 333-333-3333

# Added by API Auto Mocking Plugin
# host: virtserver.swaggerhub.com
# basePath: /TJXnoah/noahtest/1.0.0
schemes:
 - https